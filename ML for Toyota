# Data Link
# https://www.kaggle.com/datasets/vishakhdapat/price-of-used-toyota-corolla-cars/data

import pandas as pd
df = pd.read_csv(r"ToyotaCorolla.csv", encoding = 'latin-1')

df.drop("Id", axis=1, inplace=True)

df.columns
df.isnull().sum()
df['Model'].value_counts()

import re
text ="TOYOTA Corolla 1.6 16V HATCHB LINEA TERRA 2/3-Doors"
int(re.findall(r'[0-9]',text)[0])

df = df.head(100)

def extractengine(text):
    digits = re.findall(r'[0-9]',text)
    if len(digits) == 0:
      return 0
    if type(digits) == list:
      return int(digits[0])
    else:
      return int(digits)

df['Model'] = df['Model'].astype(str).map(extractengine)

from sklearn.preprocessing import LabelEncoder
mylabel = LabelEncoder()
df['Fuel_Type'] = mylabel.fit_transform(df['Fuel_Type'])
df['Color'] = mylabel.fit_transform(df['Color'])

y =df['Price'].values
X =df.drop('Price',axis=1).values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

from sklearn.preprocessing import MinMaxScaler
myscaler = MinMaxScaler()
X_train = myscaler.fit_transform(X_train)
X_test = myscaler.transform(X_test)

from sklearn.decomposition import PCA
mypca = PCA(n_components = 19)
X_train = mypca.fit_transform(X_train)
X_test = mypca.transform(X_test)

from sklearn.linear_model import LinearRegression
model = LinearRegression()

model.fit(X_train, y_train)
print("accuracy",model.score(X_test, y_test) * 100,"%")

import numpy as np
print(np.sum(mypca.explained_variance_ratio_) * 100, "%")

# text split
car = "TOYOTA Corolla 1.6 16V HATCHB LINEA TERRA 2/3-Doors"
car.split()[-1].split('-')[0].split('/')[0]
