# Ai lecture _ ML
# KNN

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.datasets import load_iris

# მონაცემების ჩატვირთვა
data = load_iris()
X = data.data
y = data.target

# მონაცემების დაყოფა სატრენინგოდ და სატესტოდ
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# მონაცემების სკალირება
scaler = StandardScaler()
X_train_scaler = scaler.fit_transform(X_train)
X_test_scaler = scaler.transform(X_test)

k = 3
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train_scaler, y_train)

y_pred = knn.predict(X_test_scaler)
print(y_pred) # გამოყანილი პროგნოზი

# მოდელის შეფასება
accurancy = accuracy_score(y_test, y_pred)
print(f"accurancy: {accurancy * 100}%")



# Linear Regression

import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score

X = 2 * np.random.rand(100, 1)
y = 3 + 4 * X + np.random.rand(100, 1)

model = LinearRegression()
model.fit(X, y)

y_pred = model.predict(X)

accurancy = r2_score(y, y_pred)
print(f"accurancy {round(accurancy, 2)} %")

# DataFrame ის შექმნა რეალურ და პროგნოზირებულების შესადარებლად
result_df = pd.DataFrame({"actual": y.flatten(), "predicted": y_pred.flatten()})
print(result_df)

plt.scatter(X, y, color="blue", label="actual_data")
plt.plot(X, y_pred)
plt.show()
